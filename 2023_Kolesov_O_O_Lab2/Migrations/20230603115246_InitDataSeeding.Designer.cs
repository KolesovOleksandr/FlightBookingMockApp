// <auto-generated />
using System;
using DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace _2023_Kolesov_O_O_Lab2.Migrations
{
    [DbContext(typeof(TimetableContext))]
    [Migration("20230603115246_InitDataSeeding")]
    partial class InitDataSeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("DataAccessLayer.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CityName = "Vinnytsia",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 2,
                            CityName = "Kyiv",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 3,
                            CityName = "Krakiv",
                            CountryId = 2
                        },
                        new
                        {
                            CityId = 4,
                            CityName = "Warshawa",
                            CountryId = 2
                        },
                        new
                        {
                            CityId = 5,
                            CityName = "Berlin",
                            CountryId = 3
                        },
                        new
                        {
                            CityId = 6,
                            CityName = "Hamburg",
                            CountryId = 3
                        },
                        new
                        {
                            CityId = 7,
                            CityName = "Paris",
                            CountryId = 4
                        },
                        new
                        {
                            CityId = 8,
                            CityName = "Bordo",
                            CountryId = 4
                        },
                        new
                        {
                            CityId = 9,
                            CityName = "London",
                            CountryId = 5
                        },
                        new
                        {
                            CityId = 10,
                            CityName = "Liverpool",
                            CountryId = 5
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            CountryName = "Ukraine"
                        },
                        new
                        {
                            CountryId = 2,
                            CountryName = "Poland"
                        },
                        new
                        {
                            CountryId = 3,
                            CountryName = "Germany"
                        },
                        new
                        {
                            CountryId = 4,
                            CountryName = "France"
                        },
                        new
                        {
                            CountryId = 5,
                            CountryName = "UK"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("DocumentNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PassengerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DocumentId");

                    b.HasIndex("PassengerId");

                    b.ToTable("Documents");

                    b.HasData(
                        new
                        {
                            DocumentId = 1,
                            DocumentName = "Passport",
                            DocumentNumber = 213123L,
                            PassengerId = 1
                        },
                        new
                        {
                            DocumentId = 2,
                            DocumentName = "Foreign Passport",
                            DocumentNumber = 214324L,
                            PassengerId = 2
                        },
                        new
                        {
                            DocumentId = 3,
                            DocumentName = "Passport",
                            DocumentNumber = 215234L,
                            PassengerId = 3
                        },
                        new
                        {
                            DocumentId = 4,
                            DocumentName = "Foreign Passport",
                            DocumentNumber = 215564L,
                            PassengerId = 4
                        },
                        new
                        {
                            DocumentId = 5,
                            DocumentName = "Passport",
                            DocumentNumber = 216237L,
                            PassengerId = 5
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.Flight", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeparturePointId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DestinationPointId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PlaneId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FlightId");

                    b.HasIndex("DeparturePointId");

                    b.HasIndex("DestinationPointId");

                    b.HasIndex("PlaneId");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            FlightId = 1,
                            DeparturePointId = 1,
                            DestinationPointId = 2,
                            FlightNumber = "qwerty-12345",
                            PlaneId = 1
                        },
                        new
                        {
                            FlightId = 2,
                            DeparturePointId = 2,
                            DestinationPointId = 3,
                            FlightNumber = "qwerty-12424",
                            PlaneId = 2
                        },
                        new
                        {
                            FlightId = 3,
                            DeparturePointId = 3,
                            DestinationPointId = 4,
                            FlightNumber = "qwerty-12347",
                            PlaneId = 3
                        },
                        new
                        {
                            FlightId = 4,
                            DeparturePointId = 4,
                            DestinationPointId = 5,
                            FlightNumber = "qwerty-12341",
                            PlaneId = 1
                        },
                        new
                        {
                            FlightId = 5,
                            DeparturePointId = 5,
                            DestinationPointId = 1,
                            FlightNumber = "qwerty-12340",
                            PlaneId = 2
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.Passenger", b =>
                {
                    b.Property<int>("PassengerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PassengerId");

                    b.ToTable("Passengers");

                    b.HasData(
                        new
                        {
                            PassengerId = 1,
                            FirstName = "John",
                            LastName = "Black"
                        },
                        new
                        {
                            PassengerId = 2,
                            FirstName = "Aron",
                            LastName = "Smith"
                        },
                        new
                        {
                            PassengerId = 3,
                            FirstName = "Taras",
                            LastName = "Clarc"
                        },
                        new
                        {
                            PassengerId = 4,
                            FirstName = "Brian",
                            LastName = "Lester"
                        },
                        new
                        {
                            PassengerId = 5,
                            FirstName = "Krieg",
                            LastName = "Allice"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.Plane", b =>
                {
                    b.Property<int>("PlaneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlaneName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PlaneId");

                    b.ToTable("Planes");

                    b.HasData(
                        new
                        {
                            PlaneId = 1,
                            PlaneName = "Airbus"
                        },
                        new
                        {
                            PlaneId = 2,
                            PlaneName = "Boeing"
                        },
                        new
                        {
                            PlaneId = 3,
                            PlaneName = "McDonnel"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AquirementTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("DocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FlightId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReturnmentTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("TicketPrice")
                        .HasColumnType("REAL");

                    b.HasKey("TicketId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("FlightId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            AquirementTime = new DateTime(2023, 6, 3, 14, 52, 46, 691, DateTimeKind.Local).AddTicks(4674),
                            DocumentId = 1,
                            FlightId = 1,
                            ReturnmentTime = new DateTime(2022, 12, 31, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            SeatNumber = 10,
                            TicketNumber = "12345-asd",
                            TicketPrice = 100.0
                        },
                        new
                        {
                            TicketId = 2,
                            AquirementTime = new DateTime(2023, 6, 3, 14, 52, 46, 691, DateTimeKind.Local).AddTicks(4734),
                            DocumentId = 2,
                            FlightId = 2,
                            ReturnmentTime = new DateTime(2022, 12, 31, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            SeatNumber = 11,
                            TicketNumber = "12345-kjsd",
                            TicketPrice = 101.0
                        },
                        new
                        {
                            TicketId = 3,
                            AquirementTime = new DateTime(2023, 6, 3, 14, 52, 46, 691, DateTimeKind.Local).AddTicks(4737),
                            DocumentId = 3,
                            FlightId = 3,
                            ReturnmentTime = new DateTime(2022, 12, 31, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            SeatNumber = 12,
                            TicketNumber = "12345-uio",
                            TicketPrice = 102.0
                        },
                        new
                        {
                            TicketId = 4,
                            AquirementTime = new DateTime(2023, 6, 3, 14, 52, 46, 691, DateTimeKind.Local).AddTicks(4739),
                            DocumentId = 4,
                            FlightId = 4,
                            ReturnmentTime = new DateTime(2022, 12, 31, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            SeatNumber = 13,
                            TicketNumber = "123456-rewq",
                            TicketPrice = 101.0
                        },
                        new
                        {
                            TicketId = 5,
                            AquirementTime = new DateTime(2023, 6, 3, 14, 52, 46, 691, DateTimeKind.Local).AddTicks(4741),
                            DocumentId = 5,
                            FlightId = 5,
                            ReturnmentTime = new DateTime(2022, 12, 31, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            SeatNumber = 7,
                            TicketNumber = "12345-qwerty",
                            TicketPrice = 101.0
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.City", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Document", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Passenger", "Passenger")
                        .WithMany()
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Flight", b =>
                {
                    b.HasOne("DataAccessLayer.Models.City", "DeparturePoint")
                        .WithMany("DeparturePoints")
                        .HasForeignKey("DeparturePointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.City", "DestinationPoint")
                        .WithMany("DestinationPoints")
                        .HasForeignKey("DestinationPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Plane", "Plane")
                        .WithMany("Flights")
                        .HasForeignKey("PlaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeparturePoint");

                    b.Navigation("DestinationPoint");

                    b.Navigation("Plane");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Ticket", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Document", "Document")
                        .WithMany("Tickets")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Flight", "Flight")
                        .WithMany("Tickets")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("DataAccessLayer.Models.City", b =>
                {
                    b.Navigation("DeparturePoints");

                    b.Navigation("DestinationPoints");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Document", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Flight", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Plane", b =>
                {
                    b.Navigation("Flights");
                });
#pragma warning restore 612, 618
        }
    }
}
